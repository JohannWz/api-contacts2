using api_contacts;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace AnnuaireContacts
{
    public partial class ListeContacts : System.Web.UI.Page
    {
        private FluxConnexion fc = new FluxConnexion();
        private User u = new User();
        private Requete maRequete = new Requete();
        private DataBase db = new DataBase();

        protected void Page_Load(object sender, EventArgs e)
        {
            fc = (FluxConnexion)Session["FluxConnexion"];
            u = (User)Session["User"];

            // Initialisation du gridview
            if (!IsPostBack) RemplirGv();
        }

        public void RemplirGv()
        {
            List<Contact> lc = new List<Contact>();

            // Masquage du champ auto_id
            gvListeContacts.Columns[0].Visible = false;

            // Si l'API est disponible
            if (fc.token != null)
            {
                maRequete.RecupererContacts(fc.token);

                // Récupération des contacts
                String json = maRequete.GetResult();
                lc = JsonConvert.DeserializeObject<List<Contact>>(json);

                // Suppression des contacts dans la base locale
                db.SupprimerContactsUser(fc.user.id);

                // Enregistrement des contacts dans la base locale
                foreach (Contact c in lc)
                {
                    db.EnregistrerContact(c);
                }

                u = fc.user;

                gvListeContacts.AutoGenerateEditButton = true;
                gvListeContacts.AutoGenerateDeleteButton = true;
            }

            SqlDataSourceContacts.SelectParameters["user_id"].DefaultValue = u.id.ToString();
        }

        protected void gvListeContacts_deleted(object sender, GridViewDeletedEventArgs e)
        {
            // Suppression du contact via l'API
            maRequete.SupprimerContact(fc.token, double.Parse(e.Values["id"].ToString()));
        }

        protected void gvListeContacts_updated(object sender, GridViewUpdatedEventArgs e)
        {
            Contact c = new Contact();
            c.id = long.Parse(e.NewValues["id"].ToString());
            c.first_name = (string)e.NewValues[1];
            c.last_name = (string)e.NewValues[2];
            c.favorite = (Boolean)e.NewValues[3];
            c.email = (string)e.NewValues[4];
            c.phone = (string)e.NewValues[5];
        }
    }
}